README.txtIntroductionThis is a basic shell implementation in C. This shell can execute both built-in and external commands, handle input/output redirection, and manage background and foreground processes.FunctionalityHere are the main functionalities of this shell:1. Built-in commands: The built-in commands implemented are exit, cd, and status. The exit command terminates the shell, cd changes the current directory, and status displays the status of the last foreground process that was run.2. External commands: Any command that is not a built-in command is considered an external command. The shell uses fork(), exec(), and wait() system calls to create a new process and execute the command.3. Input/output redirection: The shell handles the < and > operators for input and output redirection respectively.4. Background processes: The shell can run processes in the background. A command followed by & at the end is run in the background.5. Signal handling: The shell handles SIGINT and SIGTSTP signals. The SIGINT signal is ignored by the shell, but it will terminate any foreground child process. The SIGTSTP signal toggles foreground-only mode, where & is ignored and all processes are run in the foreground.6. Variable expansion: The shell supports variable expansion with the special variable $$, which is replaced with the process ID of the shell.Compilation and RunningTo compile the shell, you can use the gcc compiler as follows:gcc -o smallsh shell.c To run the shell, use:./smallshIn the shell, you can type any command at the prompt. For example:: ls -l Or run a process in the background:: sleep 60 & You can exit the shell using the exit command:: exit NoteRemember to handle memory allocation and deallocation carefully to avoid memory leaks, especially when dealing with strings and arrays.